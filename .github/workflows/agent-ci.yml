name: Agent CI (inner loop)

on:
  push:
    branches:
      - 'copilot/**'          # Copilot's working branches iterate here
  workflow_dispatch:
  issue_comment:
    types: [created]


# Keep perms tight; enough to publish checks & artifacts and post PR comments
permissions:
  contents: read
  checks: write
  pull-requests: write

# Prevent overlapping runs per branch during fast iterations
concurrency:
  group: agent-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # So we can disable this workflow on the template itself
  TEMPLATE_REPO: lifelike-and-believable/ue-plugin-template
  # Adjust to your installed UE version/location on the runner
  UE_ROOT: 'C:\Program Files\Epic Games\UE_5.6'
  # Optional: set PROJECT_UPROJECT as a repo variable/secret to enable tests
  # Example: 'D:\Projects\YourGame\YourGame.uproject'
  PROJECT_UPROJECT: ''

jobs:
  build_and_test:
    # Runs for pushes/workflow_dispatch, and also when a comment '/build' is created on a PR
    if: >-
      $(( github.repository != env.TEMPLATE_REPO)) &&
      ((github.event_name == 'push' || github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/build') && github.event.issue.pull_request != null))
    runs-on: [self-hosted, windows, ue5]   # <- keep your existing runner labels

    steps:
      - name: Checkout (full, with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Post a status comment when triggered by PR comment to let users know the build is running
      - name: Post build started comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš€ **Agent CI build started** for this PR!\n\n[View build logs â†’](${runUrl})`
            });

      # When triggered by an issue_comment on a PR, fetch and check out the PR head so
      # the build runs against the contributor's changes.
      - name: Fetch PR head (when triggered by comment)
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
        run: |
          echo "Fetching PR #${{ github.event.issue.number }} head"
          git fetch origin +refs/pull/${{ github.event.issue.number }}/head:pr-${{ github.event.issue.number }}
          git checkout pr-${{ github.event.issue.number }}

      - name: Locate plugin (.uplugin)
        id: find
        shell: powershell
        run: |
          $uplugin = Get-ChildItem -Path $PWD -Recurse -Filter *.uplugin | Select-Object -First 1
          if (-not $uplugin) {
            Write-Error "No .uplugin found in repository."
          }
          "plugin_path=$($uplugin.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "plugin_dir=$($uplugin.DirectoryName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "plugin_name=$($uplugin.BaseName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Using plugin: $($uplugin.FullName)"

      - name: Build plugin (Win64)
        shell: powershell
        run: |
          $uat = Join-Path $env:UE_ROOT 'Engine\Build\BatchFiles\RunUAT.bat'
          $pkg = Join-Path $env:RUNNER_TEMP 'PluginPackage'
          New-Item -ItemType Directory -Force -Path $pkg | Out-Null
          & "$uat" BuildPlugin `
            -Plugin="${{ steps.find.outputs.plugin_path }}" `
            -Package="$pkg" `
            -TargetPlatforms=Win64 `
            -Rocket
        # If you need additional target platforms, add them comma-separated to -TargetPlatforms

      - name: Package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find.outputs.plugin_name }}-Win64
          path: ${{ runner.temp }}/PluginPackage

      # OPTIONAL: run editor automation tests when a project is available
      - name: Run Automation Tests (optional)
        if: env.PROJECT_UPROJECT != ''
        shell: powershell
        timeout-minutes: 60
        run: |
          $editor = Join-Path $env:UE_ROOT 'Engine\Binaries\Win64\UnrealEditor-Cmd.exe'
          $logDir = Join-Path $env:RUNNER_TEMP 'TestLogs'
          New-Item -ItemType Directory -Force -Path $logDir | Out-Null
          # Example: run all functional tests headless; tailor to your suites
          & "$editor" "$env:PROJECT_UPROJECT" -unattended -nop4 -nullrhi -nosplash `
            -ExecCmds="Automation RunTests Now; Quit" `
            -ReportExportPath="$logDir"
          # Collect reports if present
          if (Test-Path $logDir) {
            Write-Host "Tests completed. Collecting reports..."
          }

      - name: Upload test reports (optional)
        if: env.PROJECT_UPROJECT != ''
        uses: actions/upload-artifact@v4
        with:
          name: TestReports
          path: ${{ runner.temp }}/TestLogs
          if-no-files-found: ignore
